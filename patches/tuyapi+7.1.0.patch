diff --git a/node_modules/tuyapi/index.js b/node_modules/tuyapi/index.js
index d98defe..f1420f4 100644
--- a/node_modules/tuyapi/index.js
+++ b/node_modules/tuyapi/index.js
@@ -3,7 +3,6 @@ const dgram = require('dgram');
 const net = require('net');
 const {EventEmitter} = require('events');
 const pTimeout = require('p-timeout');
-const pRetry = require('p-retry');
 const {default: PQueue} = require('p-queue');
 const debug = require('debug')('TuyAPI');
 
@@ -326,28 +325,13 @@ class TuyaDevice extends EventEmitter {
     });
 
     // Queue this request and limit concurrent set requests to one
-    return this._setQueue.add(() => pTimeout(new Promise((resolve, reject) => {
-      // Send request and wait for response
-      try {
-        // Send request
-        this._send(buffer);
-        if (options.shouldWaitForResponse) {
-          this._setResolver = resolve;
-        } else {
-          resolve();
-        }
-      } catch (error) {
-        reject(error);
-      }
-    }), this._responseTimeout * 1000, () => {
-      // Only gets here on timeout so clear resolver function and emit error
-      this._setResolver = undefined;
 
-      this.emit(
-        'error',
-        'Timeout waiting for status response from device id: ' + this.device.id
-      );
-    }));
+    try {
+      // Send request
+      this._send(buffer);
+    } catch (error) {
+      console.error(error);
+    }
   }
 
   /**
@@ -359,26 +343,18 @@ class TuyaDevice extends EventEmitter {
    * @returns {Promise<Any>} returned data for request
    */
   _send(buffer) {
-    // Retry up to 5 times
-    return pRetry(() => {
-      return new Promise((resolve, reject) => {
-        // Send data
-        this.connect().then(() => {
-          try {
-            this.client.write(buffer);
+    return new Promise((resolve, reject) => {
+      // Send data
+      this.connect().then(() => {
+        try {
+          this.client.write(buffer);
 
-            // Add resolver function
-            this._resolvers[this._currentSequenceN] = data => resolve(data);
-          } catch (error) {
-            reject(error);
-          }
-        })
-          .catch(error => reject(error));
-      });
-    }, {
-      onFailedAttempt: error => {
-        debug(`Attempt ${error.attemptNumber} failed. There are ${error.retriesLeft} retries left.`);
-      }, retries: 5});
+        } catch (error) {
+          reject(error);
+        }
+      })
+        .catch(error => reject(error));
+    });
   }
 
   /**
